{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","todos","props","filteredTodos","filter","isComplete","filterTodos","setState","todo","length","String","completed","title","includes","shuffleTodos","shuffle","newTodos","randomIndex","Math","floor","random","lastIndex","handleChange","event","target","name","value","this","selectUser","complete","className","type","onChange","onClick","map","id","userId","key","readOnly","React","PureComponent","defaultProps","getUsersList","fetch","then","response","json","data","CurrentUser","selectedUserId","user","prevProps","username","email","phone","resetUser","App","resetSelectedUser","item","sort","a","b","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46091229.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    todos: this.props.todos,\n    filteredTodos: this.props.todos,\n    filter: '',\n    isComplete: '',\n  }\n\n  componentDidMount() {\n    this.setState({\n      todos: this.props.todos,\n    });\n  }\n\n  filterTodos = () => {\n    this.setState(state => ({\n      filteredTodos: state.todos.filter(todo => ((state.isComplete.length > 0)\n        ? String(todo.completed) === state.isComplete\n          && todo.title.includes(state.filter)\n        : todo.title.includes(state.filter))),\n    }));\n  }\n\n  shuffleTodos = () => {\n    function shuffle(todos) {\n      const newTodos = todos;\n      let { length } = newTodos;\n\n      while (length) {\n        const randomIndex = Math.floor(Math.random() * (length -= 1));\n\n        const lastIndex = newTodos[length];\n\n        newTodos[length] = newTodos[randomIndex];\n        newTodos[randomIndex] = lastIndex;\n      }\n\n      return newTodos;\n    }\n\n    this.setState(state => ({\n      filteredTodos: [...shuffle(state.todos)],\n    }));\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n    this.filterTodos();\n  }\n\n  render() {\n    const { selectUser } = this.props;\n    const { filteredTodos, filter, complete } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            <label>\n              Filter by title:&nbsp;\n              <input\n                type=\"text\"\n                name=\"filter\"\n                value={filter}\n                onChange={this.handleChange}\n              />\n            </label>\n\n            <label>\n              Filter by active:&nbsp;\n              <select\n                name=\"isComplete\"\n                value={complete}\n                onChange={this.handleChange}\n              >\n                <option value=\"\">All todos</option>\n                <option value=\"true\">Completed todos</option>\n                <option value=\"false\">Not complete todos</option>\n              </select>\n            </label>\n\n            <button\n              className=\"TodoList__randomize\"\n              type=\"button\"\n              onClick={this.shuffleTodos}\n            >\n              Randomize\n            </button>\n            {filteredTodos.map((todo) => {\n              const { id, userId, title } = todo;\n\n              return (\n                <li\n                  className=\"TodoList__item TodoList__item--unchecked\"\n                  key={id}\n                >\n                  <label>\n                    <input type=\"checkbox\" readOnly />\n                    <p>{title}</p>\n                  </label>\n\n                  <button\n                    className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                    type=\"button\"\n                    onClick={() => {\n                      selectUser(userId);\n                    }}\n                  >\n                    User&nbsp;#\n                    {userId}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }),\n  ),\n  selectUser: PropTypes.number.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","const API_URL_TODOS = 'https://mate-api.herokuapp.com/todos';\nconst API_URL_USERS = 'https://mate-api.herokuapp.com/users/';\n\nexport const getTodosList = () => fetch(API_URL_TODOS)\n  .then(response => response.json())\n  .then(response => response.data.filter(\n    item => item.userId <= 10 && item.userId !== null && item.title !== null,\n  ).sort((a, b) => a.userId - b.userId));\n\nexport const getUsersList = userId => fetch(API_URL_USERS + userId)\n  .then(response => response.json())\n  .then(response => response.data);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUsersList } from '../../api/api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    selectedUserId: this.props.userId,\n    user: {},\n  };\n\n  componentDidMount() {\n    getUsersList(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUsersList(this.props.userId)\n        .then((user) => {\n          this.setState({\n            user,\n            selectedUserId: this.props.userId,\n          });\n        });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const { user, selectedUserId } = this.state;\n    const { name, username, email, phone } = user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {selectedUserId}\n          </span>\n        </h2>\n        <button\n          className=\"CurrentUser__clear-btn\"\n          type=\"button\"\n          onClick={() => {\n            this.props.resetUser();\n          }}\n        >\n          Clear\n        </button>\n        <h3 className=\"CurrentUser__name\">{name || username}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  resetUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosList } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodosList()\n      .then(todos => this.setState({ todos }));\n  }\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  resetSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { state, selectUser, resetSelectedUser } = this;\n    const { todos, selectedUserId } = state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length > 0\n            ? (\n              <TodoList todos={todos} selectUser={selectUser} />\n            ) : (\n              'Not todos'\n            )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                resetUser={resetSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}